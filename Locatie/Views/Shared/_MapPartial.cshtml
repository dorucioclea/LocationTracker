@model MapData
@inject Microsoft.Extensions.Options.IOptions<Locatie.Utils.AppSettings> appsettings
@{
    var options = appsettings.Value;
}
<script src="https://js.api.here.com/v3/3.1/mapsjs-core.js" type="text/javascript" charset="utf-8"></script>
<script src="https://js.api.here.com/v3/3.1/mapsjs-service.js" type="text/javascript" charset="utf-8"></script>
<script src="https://js.api.here.com/v3/3.1/mapsjs-ui.js" type="text/javascript" charset="utf-8"></script>
<script src="https://js.api.here.com/v3/3.1/mapsjs-mapevents.js" type="text/javascript" charset="utf-8"></script>
<link rel="stylesheet" type="text/css" href="https://js.api.here.com/v3/3.1/mapsjs-ui.css" />
<script src="~/js/randomColor.js"></script>
<div style="width: 100%; height: 480px" id="mapContainer"></div>

<div data-configuration
     data-here-api-key="@options.HereApiKey"
     data-here-app-id="@options.HereAppId"
     data-here-app-code="@options.HereAppCode"
     style="display: none;">
</div>
<div data-container="coordinates" style="display: none;">
    @foreach (var ride in Model.Rides)
    {
        <ride data-id="@ride.Id">
            @foreach (var ping in ride.GetPings().OrderBy(p => p.Time))
            {
                <coord data-lat="@ping.Latitude" data-long="@ping.Longitude"></coord>
            }
        </ride>
    }
    <markers>
        @if (Model.Latitude != null && Model.Longitude != null)
        {
            <coord data-lat="@Model.Latitude" data-long="@Model.Longitude"></coord>
        }
    </markers>
</div>

<script type="text/javascript">var config = document.querySelector("[data-configuration]");

    var platform = new H.service.Platform({
        apikey: config.dataset.hereApiKey,
        app_id: config.dataset.hereAppId,
        app_code: config.dataset.hereAppCode
    });

    var defaultLayers = platform.createDefaultLayers();

    var map = new H.Map(
        document.getElementById('mapContainer'),
        defaultLayers.vector.normal.map,
    );

    var group = new H.map.Group();
    var rides = document.querySelectorAll("[data-container='coordinates'] ride");
    var markers = document.querySelectorAll("[data-container='coordinates'] markers coord");

    // Rides

    rides.forEach(ride => {
        var startPoint = null;
        routeString = new H.geo.LineString();

        ride.querySelectorAll("coord").forEach(coord => {
            var latitude = parseFloat(coord.dataset.lat);
            var longitude = parseFloat(coord.dataset.long);
            coords = { lat: latitude, lng: longitude };

            routeString.pushLatLngAlt(latitude, longitude);

            if (startPoint == null)
                startPoint = coords;
            endPoint = coords;
        });

        var color = randDarkColor();
        var routeOutline = new H.map.Polyline(routeString, {
            style: {
                lineWidth: 8,
                strokeColor: hexToRgbA(color, 0.7),
                lineTailCap: 'arrow-tail',
                lineHeadCap: 'arrow-head'
            }
        });

        var routeLine = new H.map.Polyline(routeString, {
            style: {
                strokeColor: '#ffffff',
                lineWidth: 4,
                lineDash: [0, 4],
                lineTailCap: 'arrow-tail',
                lineHeadCap: 'arrow-head',
            }
        });

        var startMarker = new H.map.Marker(startPoint);
        var endMarker = new H.map.Marker(endPoint);

        if (rides.length == 1)
            group.addObjects([routeOutline, routeLine, startMarker, endMarker]);
        else
            group.addObjects([routeOutline, routeLine]);
    });

    // Markers

    markers.forEach(marker => {
        var marker = new H.map.Marker({
            lat: parseFloat(marker.dataset.lat),
            lng: parseFloat(marker.dataset.long)
        });

        group.addObject(marker);
    });

    map.addObject(group);

    map.getViewModel().setLookAtData({
        bounds: group.getBoundingBox()
    });

    var ui = H.ui.UI.createDefault(map, defaultLayers);
    var behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));</script>
